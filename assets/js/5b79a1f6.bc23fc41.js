"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[2749],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=i.createContext({}),s=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(t),c=a,f=m["".concat(u,".").concat(c)]||m[c]||d[c]||r;return t?i.createElement(f,l(l({ref:n},p),{},{components:t})):i.createElement(f,l({ref:n},p))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6964:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>r,contentTitle:()=>l,metadata:()=>o,toc:()=>u,default:()=>p});var i=t(7462),a=(t(7294),t(3905));const r={},l="3 - TensorFlow implementation",o={unversionedId:"Advanced Learning Algorithms/TensorFlow implementation",id:"Advanced Learning Algorithms/TensorFlow implementation",title:"3 - TensorFlow implementation",description:"Implementing Inferencing Code with TensorFlow",source:"@site/docs/Advanced Learning Algorithms/10-TensorFlow implementation.md",sourceDirName:"Advanced Learning Algorithms",slug:"/Advanced Learning Algorithms/TensorFlow implementation",permalink:"/docs/Advanced Learning Algorithms/TensorFlow implementation",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Advanced Learning Algorithms/10-TensorFlow implementation.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"2 - Neural network layer",permalink:"/docs/Advanced Learning Algorithms/Neural network layer"},next:{title:"4-Neural network implementation in Python",permalink:"/docs/Advanced Learning Algorithms/Neural network implementation in Python"}},u=[{value:"Implementing Inferencing Code with TensorFlow",id:"implementing-inferencing-code-with-tensorflow",children:[{value:"Introduction to TensorFlow",id:"introduction-to-tensorflow",children:[],level:3},{value:"Example: Optimizing Coffee Roasting",id:"example-optimizing-coffee-roasting",children:[],level:3},{value:"Neural Network Architecture",id:"neural-network-architecture",children:[],level:3},{value:"Forward Propagation in TensorFlow",id:"forward-propagation-in-tensorflow",children:[],level:3},{value:"Implementing Inferencing Code in TensorFlow",id:"implementing-inferencing-code-in-tensorflow",children:[],level:3},{value:"Example: Handwritten Digit Classification",id:"example-handwritten-digit-classification",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],level:2},{value:"Data Representation in NumPy and TensorFlow",id:"data-representation-in-numpy-and-tensorflow",children:[{value:"Introduction",id:"introduction",children:[],level:3},{value:"Representing Data in TensorFlow",id:"representing-data-in-tensorflow",children:[],level:3},{value:"Examples of Matrix Dimensions",id:"examples-of-matrix-dimensions",children:[],level:3},{value:"1D Vectors in TensorFlow",id:"1d-vectors-in-tensorflow",children:[],level:3},{value:"Tensor in TensorFlow",id:"tensor-in-tensorflow",children:[],level:3},{value:"Activation Outputs in TensorFlow",id:"activation-outputs-in-tensorflow",children:[],level:3},{value:"Conclusion",id:"conclusion-1",children:[],level:3}],level:2},{value:"Building Neural Networks in TensorFlow",id:"building-neural-networks-in-tensorflow",children:[{value:"Introduction",id:"introduction-1",children:[],level:3},{value:"Creating a Neural Network",id:"creating-a-neural-network",children:[],level:3},{value:"Training a Neural Network",id:"training-a-neural-network",children:[],level:3},{value:"Inference with a Neural Network",id:"inference-with-a-neural-network",children:[],level:3},{value:"Simplifying the Code",id:"simplifying-the-code",children:[],level:3},{value:"Applying the Approach to Digit Classification",id:"applying-the-approach-to-digit-classification",children:[],level:3},{value:"Understanding the Code",id:"understanding-the-code",children:[],level:3},{value:"Conclusion",id:"conclusion-2",children:[],level:3}],level:2}],s={toc:u};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"3---tensorflow-implementation"},"3 - TensorFlow implementation"),(0,a.kt)("h2",{id:"implementing-inferencing-code-with-tensorflow"},"Implementing Inferencing Code with TensorFlow"),(0,a.kt)("h3",{id:"introduction-to-tensorflow"},"Introduction to TensorFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"TensorFlow is a leading framework for implementing deep learning algorithms."),(0,a.kt)("li",{parentName:"ul"},"It is widely used for building neural networks and is the focus of this specialization."),(0,a.kt)("li",{parentName:"ul"},"TensorFlow is highly versatile and often used for various applications in machine learning.")),(0,a.kt)("h3",{id:"example-optimizing-coffee-roasting"},"Example: Optimizing Coffee Roasting"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Neural networks can be applied to optimize the quality of coffee beans during roasting."),(0,a.kt)("li",{parentName:"ul"},"Two controllable parameters: temperature and duration of roasting."),(0,a.kt)("li",{parentName:"ul"},"Dataset with different temperature, duration, and label (good or bad coffee)."),(0,a.kt)("li",{parentName:"ul"},"Goal: Use neural network inference to predict if a temperature and duration setting will produce good coffee.")),(0,a.kt)("h3",{id:"neural-network-architecture"},"Neural Network Architecture"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Input features: Temperature and duration (e.g., 200 degrees Celsius for 17 minutes)."),(0,a.kt)("li",{parentName:"ul"},"Layer 1: Dense layer with 3 units and sigmoid activation function."),(0,a.kt)("li",{parentName:"ul"},"Layer 2: Dense layer with 1 unit and sigmoid activation function."),(0,a.kt)("li",{parentName:"ul"},"Output layer: Binary classification (positive or negative cross) after optional thresholding at 0.5.")),(0,a.kt)("h3",{id:"forward-propagation-in-tensorflow"},"Forward Propagation in TensorFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Compute a1: Apply Layer 1 function to the input features x."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a1 = Layer1(x) = sigmoid(W1 ","*"," x + b1)"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Compute a2: Apply Layer 2 function to a1."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a2 = Layer2(a1) = sigmoid(W2 ","*"," a1 + b2)"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Compute the final output (a3) and optionally threshold it at 0.5 for binary prediction."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a3 = sigmoid(W3 ","*"," a2 + b3)"),(0,a.kt)("li",{parentName:"ul"},"y_hat = 1 if a3 >= 0.5 else 0")))),(0,a.kt)("h3",{id:"implementing-inferencing-code-in-tensorflow"},"Implementing Inferencing Code in TensorFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Load the TensorFlow library."),(0,a.kt)("li",{parentName:"ol"},"Load parameters W and b of the neural network."),(0,a.kt)("li",{parentName:"ol"},"Define the neural network architecture using dense layers and activation functions."),(0,a.kt)("li",{parentName:"ol"},"Compute the activations a1, a2, and a3 using forward propagation."),(0,a.kt)("li",{parentName:"ol"},"Optional: Threshold the output a3 to obtain a binary prediction y_hat.")),(0,a.kt)("h3",{id:"example-handwritten-digit-classification"},"Example: Handwritten Digit Classification"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Input features: Pixel intensity values of handwritten digits."),(0,a.kt)("li",{parentName:"ul"},"Layer 1: Dense layer with 25 units and sigmoid activation function."),(0,a.kt)("li",{parentName:"ul"},"Layer 2: Dense layer for intermediate computation."),(0,a.kt)("li",{parentName:"ul"},"Layer 3: Final dense layer for classification."),(0,a.kt)("li",{parentName:"ul"},"Optional: Threshold the output for binary prediction.")),(0,a.kt)("h3",{id:"conclusion"},"Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"TensorFlow is a powerful framework for implementing deep learning algorithms.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Inferencing in neural networks involves forward propagation to compute activation values.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"TensorFlow provides functions for defining neural network architecture and computing activations.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Proper handling of data structures, such as numpy arrays, is crucial in TensorFlow."))),(0,a.kt)("h2",{id:"data-representation-in-numpy-and-tensorflow"},"Data Representation in NumPy and TensorFlow"),(0,a.kt)("h3",{id:"introduction"},"Introduction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Consistent framework for representing data in NumPy and TensorFlow"),(0,a.kt)("li",{parentName:"ul"},"Inconsistencies between the two libraries due to their history"),(0,a.kt)("li",{parentName:"ul"},"Understanding conventions for correct code implementation")),(0,a.kt)("h3",{id:"representing-data-in-tensorflow"},"Representing Data in TensorFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Data set example: coffee features"),(0,a.kt)("li",{parentName:"ul"},"TensorFlow convention: ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," represented as a matrix"),(0,a.kt)("li",{parentName:"ul"},"Matrix representation: 2D array of numbers"),(0,a.kt)("li",{parentName:"ul"},"Convention: Dimension = Number of rows x Number of columns"),(0,a.kt)("li",{parentName:"ul"},"Storing matrix in code: ",(0,a.kt)("inlineCode",{parentName:"li"},"x = np.array([[1, 2, 3], [4, 5, 6]])"))),(0,a.kt)("h3",{id:"examples-of-matrix-dimensions"},"Examples of Matrix Dimensions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example 1: 2 rows, 3 columns (2x3 matrix)"),(0,a.kt)("li",{parentName:"ul"},"Example 2: 4 rows, 2 columns (4x2 matrix)"),(0,a.kt)("li",{parentName:"ul"},"Matrices can have different dimensions: 1x2, 2x1, etc."),(0,a.kt)("li",{parentName:"ul"},"Representing input feature vectors:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Example 1: ",(0,a.kt)("inlineCode",{parentName:"li"},"x = np.array([[200, 17]])")," (1x2 matrix)"),(0,a.kt)("li",{parentName:"ul"},"Example 2: ",(0,a.kt)("inlineCode",{parentName:"li"},"x = np.array([[200], [17]])")," (2x1 matrix)"),(0,a.kt)("li",{parentName:"ul"},"Difference between double and single square brackets")))),(0,a.kt)("h3",{id:"1d-vectors-in-tensorflow"},"1D Vectors in TensorFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Convention: Use matrices to represent data in TensorFlow"),(0,a.kt)("li",{parentName:"ul"},"1D vector vs. 2D matrix"),(0,a.kt)("li",{parentName:"ul"},"Code convention in TensorFlow: 2D matrices for data representation"),(0,a.kt)("li",{parentName:"ul"},"Efficiency advantage for large datasets in TensorFlow")),(0,a.kt)("h3",{id:"tensor-in-tensorflow"},"Tensor in TensorFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tensor: Data type for storing and computing on matrices efficiently"),(0,a.kt)("li",{parentName:"ul"},"Tensor is a way to represent matrices"),(0,a.kt)("li",{parentName:"ul"},"Conversion between tensor and NumPy array: ",(0,a.kt)("inlineCode",{parentName:"li"},"a1.numpy()"))),(0,a.kt)("h3",{id:"activation-outputs-in-tensorflow"},"Activation Outputs in TensorFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Example: Layer 2 with sigmoid activation"),(0,a.kt)("li",{parentName:"ul"},"Output ",(0,a.kt)("inlineCode",{parentName:"li"},"a2")," is a 1x1 matrix (1D array)"),(0,a.kt)("li",{parentName:"ul"},"Conversion between tensor and NumPy array: ",(0,a.kt)("inlineCode",{parentName:"li"},"a2.numpy()"))),(0,a.kt)("h3",{id:"conclusion-1"},"Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Representing data in TensorFlow and NumPy"),(0,a.kt)("li",{parentName:"ul"},"Conversion between tensor and NumPy array"),(0,a.kt)("li",{parentName:"ul"},"Unfortunate history leading to inconsistencies"),(0,a.kt)("li",{parentName:"ul"},"Awareness of conventions when writing code")),(0,a.kt)("h2",{id:"building-neural-networks-in-tensorflow"},"Building Neural Networks in TensorFlow"),(0,a.kt)("h3",{id:"introduction-1"},"Introduction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Recap of previous knowledge on TensorFlow"),(0,a.kt)("li",{parentName:"ul"},"Different approach to building neural networks"),(0,a.kt)("li",{parentName:"ul"},"Sequential function in TensorFlow for stringing together layers")),(0,a.kt)("h3",{id:"creating-a-neural-network"},"Creating a Neural Network"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Manual approach: Create layers and perform forward propagation step by step"),(0,a.kt)("li",{parentName:"ul"},"Sequential approach: Tell TensorFlow to string layers together automatically")),(0,a.kt)("h3",{id:"training-a-neural-network"},"Training a Neural Network"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Input data: Training set (X) and target labels (Y)"),(0,a.kt)("li",{parentName:"ul"},"Store data in numpy arrays"),(0,a.kt)("li",{parentName:"ul"},"Two functions for training: ",(0,a.kt)("inlineCode",{parentName:"li"},"model.compile")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"model.fit"))),(0,a.kt)("h3",{id:"inference-with-a-neural-network"},"Inference with a Neural Network"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Forward propagation for new examples (X_new)"),(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"model.predict")," to obtain output values (a2)"),(0,a.kt)("li",{parentName:"ul"},"Sequential model compiles and trains the neural network"),(0,a.kt)("li",{parentName:"ul"},"Inference can be done using the compiled model")),(0,a.kt)("h3",{id:"simplifying-the-code"},"Simplifying the Code"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Convention in TensorFlow for compact code"),(0,a.kt)("li",{parentName:"ul"},"Sequential model with layers defined directly"),(0,a.kt)("li",{parentName:"ul"},"Example: Dense layers with sigmoid activation")),(0,a.kt)("h3",{id:"applying-the-approach-to-digit-classification"},"Applying the Approach to Digit Classification"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Similar process for different examples (e.g., digit classification)"),(0,a.kt)("li",{parentName:"ul"},"Define layers and string them together using sequential function"),(0,a.kt)("li",{parentName:"ul"},"Store data in a matrix and use ",(0,a.kt)("inlineCode",{parentName:"li"},"model.compile")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"model.fit")),(0,a.kt)("li",{parentName:"ul"},"Inference with ",(0,a.kt)("inlineCode",{parentName:"li"},"model.predict"))),(0,a.kt)("h3",{id:"understanding-the-code"},"Understanding the Code"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Importance of understanding the code's functionality"),(0,a.kt)("li",{parentName:"ul"},"Implementing forward propagation from scratch for deeper understanding"),(0,a.kt)("li",{parentName:"ul"},"Using libraries efficiently but also comprehending the underlying processes")),(0,a.kt)("h3",{id:"conclusion-2"},"Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Building neural networks in TensorFlow"),(0,a.kt)("li",{parentName:"ul"},"Sequential function for stringing together layers"),(0,a.kt)("li",{parentName:"ul"},"Training and inference processes using model functions"),(0,a.kt)("li",{parentName:"ul"},"Balance between using libraries efficiently and understanding code functionality")))}p.isMDXComponent=!0}}]);